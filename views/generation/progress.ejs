<%- include('../partials/_header', { user: true }) %>

<div class="container mt-4">
  <div class="generation-container">
    <h1>Generating Your Website</h1>
    <p class="lead text-center">Please wait while we create your website with Ollama</p>
    
    <% if (!isServerRunning) { %>
      <div class="alert alert-danger">
        <h4 class="alert-heading">Ollama Server Not Running!</h4>
        <p>We couldn't connect to the Ollama server. Please make sure Ollama is installed and running on your system.</p>
        <hr>
        <p class="mb-0">
          <a href="https://ollama.ai" target="_blank" class="alert-link">Download Ollama</a> | 
          <a href="#" class="alert-link" id="retryConnection">Retry Connection</a>
        </p>
      </div>
    <% } %>
    
    <div class="card">
      <div class="card-body">
        <div class="website-info mb-4">
          <h3><%= website.businessName %></h3>
          <p><%= website.businessDescription %></p>
        </div>
        
        <div class="progress-container">
          <div class="progress-status mb-2">
            <span id="statusText">Initializing...</span>
            <span id="progressPercent">0%</span>
          </div>
          <div class="progress mb-3" style="height: 20px;">
            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          
          <div id="generationSteps" class="generation-steps">
            <div class="step active" data-step="0">
              <i class="fas fa-spinner fa-spin"></i>
              <span>Initializing website generation</span>
            </div>
            <div class="step" data-step="1">
              <i class="fas fa-code"></i>
              <span>Creating header and footer</span>
            </div>
            <div class="step" data-step="2">
              <i class="fas fa-file-alt"></i>
              <span>Generating Home page</span>
            </div>
            <div class="step" data-step="3">
              <i class="fas fa-file-alt"></i>
              <span>Generating About page</span>
            </div>
            <div class="step" data-step="4">
              <i class="fas fa-file-alt"></i>
              <span>Generating Services page</span>
            </div>
            <div class="step" data-step="5">
              <i class="fas fa-file-alt"></i>
              <span>Generating Contact page</span>
            </div>
            <div class="step" data-step="6">
              <i class="fas fa-check-circle"></i>
              <span>Finalizing website</span>
            </div>
          </div>
        </div>
        
        <!-- Generation Tips -->
        <div class="generation-tips mt-4">
          <h4>While You Wait...</h4>
          <div class="tips-carousel">
            <div id="tipCarousel" class="carousel slide" data-bs-ride="carousel">
              <div class="carousel-inner">
                <div class="carousel-item active">
                  <div class="tip-card">
                    <i class="fas fa-lightbulb tip-icon"></i>
                    <p>Ollama is using AI to create a unique website based on your specifications.</p>
                  </div>
                </div>
                <div class="carousel-item">
                  <div class="tip-card">
                    <i class="fas fa-clock tip-icon"></i>
                    <p>The generation process typically takes 2-3 minutes depending on your website complexity.</p>
                  </div>
                </div>
                <div class="carousel-item">
                  <div class="tip-card">
                    <i class="fas fa-paint-brush tip-icon"></i>
                    <p>Your website will include custom styling based on your color and font choices.</p>
                  </div>
                </div>
                <div class="carousel-item">
                  <div class="tip-card">
                    <i class="fas fa-mobile-alt tip-icon"></i>
                    <p>All generated pages are fully responsive and will work on all device sizes.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="errorModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Generation Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>An error occurred during website generation. Please try again.</p>
        <div id="errorDetails" class="alert alert-danger"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="retryButton">Retry Generation</button>
      </div>
    </div>
  </div>
</div>

<%- include('../partials/_footer') %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.getElementById('progressBar');
    const progressPercent = document.getElementById('progressPercent');
    const statusText = document.getElementById('statusText');
    const generationSteps = document.getElementById('generationSteps');
    const steps = document.querySelectorAll('.step');
    const retryButton = document.getElementById('retryButton');
    const retryConnection = document.getElementById('retryConnection');
    const websiteId = '<%= website._id %>';
    let intervalId;
    let tipCarousel;
    
    // Initialize Bootstrap carousel
    tipCarousel = new bootstrap.Carousel(document.getElementById('tipCarousel'), {
      interval: 5000
    });
    
    // Start generation automatically
    startGeneration();
    
    // Start polling for status updates
    intervalId = setInterval(checkStatus, 2000);
    
    // Retry button click handler
    if (retryButton) {
      retryButton.addEventListener('click', function() {
        bootstrap.Modal.getInstance(document.getElementById('errorModal')).hide();
        startGeneration();
      });
    }
    
    // Retry connection button click handler
    if (retryConnection) {
      retryConnection.addEventListener('click', function(e) {
        e.preventDefault();
        window.location.reload();
      });
    }
    
    // Start the generation process
    function startGeneration() {
      fetch(`/generate/${websiteId}/start`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          showError(data.message);
        }
      })
      .catch(error => {
        console.error('Error starting generation:', error);
        showError('Failed to start generation process');
      });
    }
    
    // Check generation status
    function checkStatus() {
      fetch(`/generate/${websiteId}/status`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            updateProgress(data.progress, data.message, data.status);
            
            // If generation is complete or failed, stop polling
            if (data.status === 'completed' || data.status === 'failed') {
              clearInterval(intervalId);
              
              if (data.status === 'completed') {
                // Redirect to completion page
                setTimeout(() => {
                  window.location.href = `/generate/${websiteId}/complete`;
                }, 1000);
              } else if (data.status === 'failed') {
                showError('Website generation failed');
              }
            }
          } else {
            showError(data.message);
            clearInterval(intervalId);
          }
        })
        .catch(error => {
          console.error('Error checking status:', error);
        });
    }
    
    // Update progress UI
    function updateProgress(progress, message, status) {
      // Update progress bar
      progressBar.style.width = `${progress}%`;
      progressBar.setAttribute('aria-valuenow', progress);
      progressPercent.textContent = `${Math.round(progress)}%`;
      
      // Update status text
      statusText.textContent = message;
      
      // Update steps
      let currentStep = 0;
      
      if (progress < 5) {
        currentStep = 0;
      } else if (progress < 20) {
        currentStep = 1;
      } else if (progress < 35) {
        currentStep = 2;
      } else if (progress < 50) {
        currentStep = 3;
      } else if (progress < 65) {
        currentStep = 4;
      } else if (progress < 80) {
        currentStep = 5;
      } else {
        currentStep = 6;
      }
      
      // Update step classes
      steps.forEach((step, index) => {
        step.classList.remove('active', 'completed');
        
        if (index < currentStep) {
          step.classList.add('completed');
          const icon = step.querySelector('i');
          icon.classList.remove('fa-spinner', 'fa-spin');
          icon.classList.add('fa-check');
        } else if (index === currentStep) {
          step.classList.add('active');
          const icon = step.querySelector('i');
          if (index < 6) {
            icon.classList.add('fa-spinner', 'fa-spin');
          }
        }
      });
      
      // Change progress bar color based on status
      if (status === 'failed') {
        progressBar.classList.remove('bg-primary', 'bg-success');
        progressBar.classList.add('bg-danger');
      } else if (progress === 100) {
        progressBar.classList.remove('bg-primary', 'bg-danger');
        progressBar.classList.add('bg-success');
      }
    }
    
    // Show error modal
    function showError(message) {
      const errorDetails = document.getElementById('errorDetails');
      errorDetails.textContent = message;
      
      new bootstrap.Modal(document.getElementById('errorModal')).show();
    }
  });
</script>